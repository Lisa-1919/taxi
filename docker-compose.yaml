services:
  eureka:
    image: eureka:latest
    build:
      context: ./eureka
      dockerfile: Dockerfile
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8761" ]
      interval: 30s
      timeout: 20s
      retries: 10
    ports:
      - "8761:8761"
    networks:
      - microservices-net

  gateway:
    image: gateway:latest
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "8765:8765"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_SERVER_URL}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT_SECRET: ${TAXI_CLIENT_SECRET}
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWK_JWKSETURI: ${JWK_SET_URI}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_ISSUER_URI: ${ISSUER_URI}
      ZIPKIN_TRACING_ENDPOINT: ${ZIPKIN_TRACING_ENDPOINT}
      DRIVER_SERVICE_URL: http://driver-service:8081
      PASSENGER_SERVICE_URL: http://passenger-service:8082
      RIDES_SERVICE_URL: http://rides-service:8083
      RATING_SERVICE_URL: http://rating-service:8084
      ACCOUNT_SERVICE_URL: http://account-service:8085
    depends_on:
      eureka:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - microservices-net
      - monitoring

  config-service:
    image: config-service:latest
    build:
      context: ./config-service
      dockerfile: Dockerfile
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail --silent http://localhost:8888/actuator/health | grep UP || exit 1" ]
      interval: 30s
      timeout: 20s
      retries: 10
    ports:
      - "8888:8888"
    environment:
      SPRING_PROFILES_ACTIVE: git
      SPRING_CLOUD_CONFIG_SERVER_GIT_URI: https://github.com/Lisa-1919/taxi-config.git
      SPRING_CLOUD_CONFIG_SERVER_GIT_DEFAULT_LABEL: main
      SPRING_CLOUD_CONFIG_SERVER_GIT_SEARCH_PATH: common,{application},{application}/{profile}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_SERVER_URL}
    depends_on:
      eureka:
        condition: service_healthy
    networks:
      - microservices-net

  driver-service:
    image: driver-service:latest
    build:
      context: ./driver-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: ${PROFILE}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_SERVER_URL}
      SPRING_DATASOURCE_URL: jdbc:postgresql://driver-db:5432/driver-service
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWK_JWKSETURI: ${JWK_SET_URI}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_ISSUER_URI: ${ISSUER_URI}
      ZIPKIN_TRACING_ENDPOINT: ${ZIPKIN_TRACING_ENDPOINT}
    depends_on:
      eureka:
        condition: service_healthy
      config-service:
        condition: service_healthy
      driver-db:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - microservices-net
      - monitoring

  passenger-service:
    image: passenger-service:latest
    build:
      context: ./passenger-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: ${PROFILE}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_SERVER_URL}
      SPRING_DATASOURCE_URL: jdbc:postgresql://passenger-db:5432/passenger-service
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWK_JWKSETURI: ${JWK_SET_URI}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_ISSUER_URI: ${ISSUER_URI}
      ZIPKIN_TRACING_ENDPOINT: ${ZIPKIN_TRACING_ENDPOINT}
    depends_on:
      eureka:
        condition: service_healthy
      config-service:
        condition: service_healthy
      passenger-db:
        condition: service_healthy
      kafka:
        condition: service_started
      keycloak:
        condition: service_healthy
    networks:
      - microservices-net
      - monitoring

  rides-service:
    image: rides-service:latest
    build:
      context: ./rides-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: ${PROFILE}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_SERVER_URL}
      SPRING_DATASOURCE_URL: jdbc:postgresql://rides-db:5432/rides-service
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWK_JWKSETURI: ${JWK_SET_URI}
      ZIPKIN_TRACING_ENDPOINT: ${ZIPKIN_TRACING_ENDPOINT}
    depends_on:
      eureka:
        condition: service_healthy
      config-service:
        condition: service_healthy
      rides-db:
        condition: service_healthy
      kafka:
        condition: service_started
      keycloak:
        condition: service_healthy
    networks:
      - microservices-net
      - monitoring

  rating-service:
    image: rating-service:latest
    build:
      context: ./rating-service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: ${PROFILE}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_SERVER_URL}
      SPRING_DATASOURCE_URL: jdbc:postgresql://rating-db:5432/rating-service
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWK_JWKSETURI: ${JWK_SET_URI}
      ZIPKIN_TRACING_ENDPOINT: ${ZIPKIN_TRACING_ENDPOINT}
    depends_on:
      eureka:
        condition: service_healthy
      config-service:
        condition: service_healthy
      rating-db:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - microservices-net
      - monitoring

  driver-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: driver-service
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    ports:
      - "5432:5432"
    volumes:
      - driver_data:/var/lib/postgresql/data
    networks:
      - microservices-net

  passenger-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: passenger-service
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    ports:
      - "5433:5432"
    volumes:
      - passenger_data:/var/lib/postgresql/data
    networks:
      - microservices-net

  rides-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: rides-service
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    ports:
      - "5434:5432"
    volumes:
      - rides_data:/var/lib/postgresql/data
    networks:
      - microservices-net

  rating-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: rating-service
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    ports:
      - "5435:5432"
    volumes:
      - rating_data:/var/lib/postgresql/data
    networks:
      - microservices-net

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOO_ENABLE_AUTH: "no"
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      - microservices-net

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://:9092
    depends_on:
      - zookeeper
    networks:
      - microservices-net

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - microservices-net
      - monitoring

  grafana:
    build: 'docker/grafana'
    ports:
      - "3000:3000"
    volumes:
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    networks:
      - monitoring

  loki:
    image: grafana/loki:2.9.1
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./docker/loki/loki-config.yml:/etc/loki/local-config.yml
      - ./loki-data/loki/wal:/wal
      - ./loki-data/loki/chunks:/loki/chunks
    command: -config.file=/etc/loki/local-config.yml -config.expand-env=true
    environment:
      CURRENT_DATE: "2024-12-17"
    networks:
      - monitoring

  promtail:
    image: grafana/promtail:2.9.1
    container_name: promtail
    volumes:
      - ./docker/promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - monitoring
    command:
      - -config.file=/etc/promtail/config.yml

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9411/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - monitoring

  keycloak:
    build:
      context: ./docker/keycloak
      dockerfile: Dockerfile
    container_name: keycloak
    healthcheck:
      test: [ "CMD-SHELL", "curl --head -fsS http://localhost:9000/health/ready || exit 1" ]
      interval: 30s
      timeout: 20s
      retries: 10
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: ${POSTGRES_USER}
      DB_DATABASE: keycloak-db
      DB_SCHEMA: public
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_IMPORT: /opt/keycloak/data/import/realm.json
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    volumes:
      - ./docker/keycloak:/opt/keycloak/data/import
    command: start-dev --import-realm
    depends_on:
      keycloak-db:
        condition: service_healthy
    ports:
      - 8080:8080
      - 9000:9000
    networks:
      - microservices-net

  keycloak-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: keycloak-db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    ports:
      - "5436:5432"
    volumes:
      - keycloak_data:/var/lib/postgresql/data
    networks:
      - microservices-net

  account-service:
    image: account-service:latest
    build:
      context: ./account
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_SERVER_URL}
      AUTH_SERVER_URL: ${AUTH_SERVER_URL}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT_SECRET: ${TAXI_CLIENT_SECRET}
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWK_JWKSETURI: ${JWK_SET_URI}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_ISSUER_URI: ${ISSUER_URI}
      ZIPKIN_TRACING_ENDPOINT: ${ZIPKIN_TRACING_ENDPOINT}
    depends_on:
      eureka:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - microservices-net
      - monitoring

networks:
  microservices-net:
  monitoring:

volumes:
  driver_data:
  passenger_data:
  rides_data:
  rating_data:
  keycloak_data:
